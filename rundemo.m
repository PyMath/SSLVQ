% Data = loadsim1data('noise', true);

% Simulated data similar to that in Hammer & Villmann's GRLVQ paper.
% Data = loadsim1crossmoddata('noise', false);

% 2 Classes, well separated, mirrored but rotated in each modality.
% Data = loadsim2crossmoddata(500, 'noise', false);

% 2 Classes, touching, mirrored but rotated in each modality.
% Data = loadsim3crossmoddata(500, 'noise', false);

% 3 Classes, well separated, mirrored but rotated in each modality.
% Data = loadsim4crossmoddata(500, 'noise', false);

% 2 Classes, well separated in out-modality, mixed in in-modality, rotated.
% Data = loadsim5crossmoddata(500, 'noise', false);

% 2 Classes, well separated in out-modality, touching in in-modality, not rotated.
% Data = loadsim6crossmoddata(1000, 'noise', false);

% 2 Classes, well separated, mirrored in each modality.
% Data = loadexample1crossmoddata('noise', false);

% run ./data/loadirisdata;
% run ./data/loadionospheredata;
% run ./data/loadpimadata;
% run ./data/loadwinedata;
% run ./data/loadsoybeandata;
% run ./data/loadwbcdata;
run  ./data/loadaffordancedata;
% loadwinequalityred;
% Data = castasregression(Data);

% 'save', './results/results.mat',...

LearnerParams = {  'name', 'SSGLVQ',...
                   'type', 'bimodal',...
                   'Data', Data,...
                   'randomize_train', true,...
                   'normalization', 'none',...
                   'normalization_method', 'none',... % var, range, log, logistic, histD, histC, eval
                   'modality_types', {'codebook', 'codebook'},...
                   'mapping_type', 'hebbian',...
                   'auxdist_type', 'hellinger',...
                   'codebook_sizes', {[10 10], [10 10]},...
                   'codebook_neighs', {'gaussian', 'gaussian'},...
                   'codebook_lattices', {'hexa', 'hexa'},...
                   'codebook_init_method', {'rand', 'rand'},... % rand, rand_sample, class_sample, dist_mean
                   'phase_shifts', {{0.5}, {NaN}},...
                   'updaters', {{'SOM', 'HeurGLVQ'}, {'SOM'}},...
                   'alpha_types', {{'constant', 'constant'}, {'constant'}},...
                   'alpha_inits', {{0.2, 0.2}, {0.2}},...
                   'radius_types', {{'linear', 'linear'}, {'linear'}},...
                   'radius_inits', {{3, 1}, {3}},...
                   'radius_fins', {{1, 1}, {1}},...
                   'window_sizes', {{NaN, NaN}, {NaN}},...
                   'alpha_feature_types', {{NaN, 'constant'}, {NaN}},...
                   'alpha_feature_inits', {{NaN, 0.1}, {NaN}},...
                   'activation_types', {{'gaussian', 'gaussian'}, {'gaussian'}},...
                   'feature_selection', 'fuzzy',...
                   'feature_selection_max', NaN,...
                   'feature_selection_feedback', true,...                                   
                   'metric', {'sumsquared', 'sumsquared'},...
                   'classification_method', 'node',...
                   'node_colouring_method', 'cluster_mean_node_cull',... % cluster_mean, cluster_max, cluster_mean_node_cull
                   'use_mex', false,...
                   'epochs', 1,...
                   'debug', 2,...
                   'visualize', false};               
            
MyLearner = BiModalLearner(LearnerParams{:});

MyLearner.train();
